{"version":3,"file":"ng-print.js","sources":["ng-print/lib/window.ref.ts","ng-print/lib/ng-print.directive.ts","ng-print/lib/ng-print.module.ts"],"names":[],"mappings":"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","sourcesContent":["// copy from https://brianflove.com/2018/01/11/angular-window-provider/\r\n\r\nimport { isPlatformBrowser } from \"@angular/common\";\r\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID } from '@angular/core';\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n\r\n  get nativeWindow(): Window | Object {\r\n    throw new Error('Not implemented.');\r\n  }\r\n\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\nexport class BrowserWindowRef extends WindowRef {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get nativeWindow(): Window | Object {\r\n    return window;\r\n  }\r\n\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return browserWindowRef.nativeWindow;\r\n  }\r\n  return new Object();\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n  provide: WindowRef,\r\n  useClass: BrowserWindowRef\r\n};\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n  provide: WINDOW,\r\n  useFactory: windowFactory,\r\n  deps: [ WindowRef, PLATFORM_ID ]\r\n};\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [\r\n  browserWindowProvider,\r\n  windowProvider\r\n];","import { Directive, HostListener, Input, Inject } from \"@angular/core\";\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { WINDOW } from './window.ref';\r\n\r\n@Directive({\r\n    selector: \"button[ngPrint]\"\r\n})\r\nexport class NgPrintDirective {\r\n\r\n    @Input() elementToPrint: HTMLInputElement;\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any, \r\n        @Inject(WINDOW) private window: any\r\n    ) { }\r\n\r\n    @HostListener('click')\r\n    public print(): void {\r\n\r\n        const x = this.document.getElementsByTagName(\"head\")[0].innerHTML;\r\n        const iframe = this.document.createElement(\"iframe\");\r\n        iframe.style.display='none';\r\n\r\n        this.document.body.appendChild(iframe);\r\n        iframe.contentWindow.document.write(x);\r\n        iframe.contentWindow.document.write(\r\n            this.elementToPrint.innerHTML\r\n        );\r\n\r\n        setTimeout( () => {\r\n            this.window.frames[0].print();\r\n        }, 500);\r\n\r\n        // remove iframe after print or cancelation\r\n        setTimeout( () => {\r\n            var a = this.document.querySelectorAll('iframe');\r\n            a[0].parentNode.removeChild(a[0])\r\n        }, 500);\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { NgPrintDirective } from './ng-print.directive';\nimport { WINDOW_PROVIDERS } from \"./window.ref\";\n\n\n@NgModule({\n  declarations: [NgPrintDirective],\n  imports: [\n  ],\n  exports: [NgPrintDirective],\n  providers: [ WINDOW_PROVIDERS ]\n})\nexport class NgPrintModule { }\n"]}